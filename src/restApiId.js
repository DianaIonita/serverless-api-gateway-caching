'use strict';

const get = require('lodash.get');
const REST_API_ID_KEY = 'RestApiIdForApigCaching';

const getConfiguredRestApiId = (serverless) => {
  return get(serverless, 'service.provider.apiGateway.restApiId')
}

const restApiExists = async (serverless, settings) => {
  if (get(settings, 'restApiId')) {
    return true;
  }
  const configuredRestApiId = getConfiguredRestApiId(serverless);
  if (configuredRestApiId) {
    return true;
  }
  const resource = serverless.service.provider.compiledCloudFormationTemplate.Resources['ApiGatewayRestApi'];
  if (resource) {
    return true;
  }

  const stack = await getAlreadyDeployedStack(serverless, settings);
  if (stack) {
    const restApiIdFromAlreadyDeployedStack = await retrieveRestApiId(serverless, settings);
    if (restApiIdFromAlreadyDeployedStack) {
      return true;
    }
  }
  return false;
}

const outputRestApiIdTo = (serverless) => {
  const configuredRestApiId = getConfiguredRestApiId(serverless);
  const autoGeneratedRestApiId = { Ref: 'ApiGatewayRestApi' };

  serverless.service.provider.compiledCloudFormationTemplate.Outputs[REST_API_ID_KEY] = {
    Description: 'REST API ID',
    Value: configuredRestApiId || autoGeneratedRestApiId,
  };
};

const getAlreadyDeployedStack = async (serverless, settings) => {
  try {
    const stackName = serverless.providers.aws.naming.getStackName(settings.stage);
    const stack = await serverless.providers.aws.request('CloudFormation', 'describeStacks', { StackName: stackName },
      settings.stage,
      settings.region
    );
    return stack;
  }
  catch (error) {
    serverless.cli.log(`[serverless-api-gateway-caching] Could not retrieve stack because: ${error.message}.`);
    return;
  }
}

const retrieveRestApiId = async (serverless, settings) => {
  if (settings.restApiId) {
    return settings.restApiId;
  }

  const stack = await getAlreadyDeployedStack(serverless, settings);
  const outputs = stack.Stacks[0].Outputs;
  const restApiKey = outputs.find(({ OutputKey }) => OutputKey === REST_API_ID_KEY)
  if (restApiKey) {
    return restApiKey.OutputValue;
  }
  else {
    serverless.cli.log(`[serverless-api-gateway-caching] Could not find stack output variable named ${REST_API_ID_KEY}.`);
  }
};

module.exports = {
  restApiExists,
  outputRestApiIdTo,
  retrieveRestApiId
};
