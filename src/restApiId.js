'use strict';

const get = require('lodash.get');
const REST_API_ID_KEY = 'RestApiIdForApigCaching';

const getConfiguredRestApiId = (serverless) => {
  return get(serverless, 'service.provider.apiGateway.restApiId')
}

const restApiExists = (serverless) => {
  const configuredRestApiId = getConfiguredRestApiId(serverless);
  if (configuredRestApiId) {
    return true;
  }
  let resource = serverless.service.provider.compiledCloudFormationTemplate.Resources['ApiGatewayRestApi'];
  if (resource) {
    return true;
  }

  resource = serverless.service.provider.compiledCloudFormationTemplate.Resources['APINestedStack'];
  if (resource) {
    return true;
  }

  return false;
}

const outputRestApiIdTo = (serverless) => {
  const configuredRestApiId = getConfiguredRestApiId(serverless);
  const autoGeneratedRestApiId = { Ref: 'ApiGatewayRestApi' };

  serverless.service.provider.compiledCloudFormationTemplate.Outputs[REST_API_ID_KEY] = {
    Description: 'Rest API Id',
    Value: configuredRestApiId || autoGeneratedRestApiId,
  };
};

const retrieveRestApiId = async (serverless, settings) => {
  const stackName = serverless.providers.aws.naming.getStackName(settings.stage);

  const cloudFormation = await serverless.providers.aws.request('CloudFormation', 'describeStacks', { StackName: stackName },
    settings.stage,
    settings.region
  );
  const outputs = cloudFormation.Stacks[0].Outputs;
  const restApiKey = outputs.find(({ OutputKey }) => OutputKey === REST_API_ID_KEY).OutputValue;

  return restApiKey;
};

module.exports = {
  restApiExists,
  outputRestApiIdTo,
  retrieveRestApiId
};
